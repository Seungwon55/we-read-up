<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.wru.wrubookstore.mapper.BookMapper">
    <!--  카테고리에 속한 책 들의 수  -->
    <select id="sCategoryCnt" parameterType="String" resultType="int">
        SELECT count(*)
        FROM book
        WHERE category_small_id=#{category}
    </select>
    <!--  책 한권의 정보 조회  -->
    <select id="select" parameterType="int" resultType="BookDto">
        SELECT *
        FROM book
        WHERE book_id=#{bookId}
    </select>
    <!--  책 여러권의 정보 조회 (등록순) -->
    <select id="selectRegList" parameterType="map" resultType="BookDto">
        SELECT *
        FROM book
        WHERE category_small_id=#{category}
        ORDER BY reg_date desc
        LIMIT #{offset}, #{limit}
    </select>
    <!-- 테스트용 -->
    <insert id="insert" parameterType="BookDto">
        INSERT INTO book (publisher_id, category_small_id, name, translator, original_price, discount_percent,
                          discount_price, sale_price, release_date, reg_date, table_of_content, description, isbn,
                          stock_quantity, size, weight, page, image)
        VALUES (#{publisherId},#{categorySmallId},#{name},#{translator},#{originalPrice},#{discountPercent},
                #{discountPrice},#{salePrice},#{releaseDate},#{regDate},#{tableOfContent},#{description},#{isbn},
                #{stockQuantity},#{size},#{weight},#{page},#{image});
    </insert>
    <sql id="sql-part-searchByTitle">
        FROM book b
        WHERE name LIKE concat('%', #{keyword}, '%')
        LIMIT #{offset}, #{pageSize}
    </sql>
    <sql id="sql-part-searchByWriter">
        FROM
            (SELECT w.*, wb.book_id
            FROM
                (SELECT *
                FROM writer
                WHERE name LIKE concat('%', #{keyword}, '%')) w, writer_book wb
        WHERE w.writer_id = wb.writer_id) wwb, book b
        WHERE wwb.book_id = b.book_id
        LIMIT #{offset}, #{pageSize}
    </sql>
    <sql id="sql-searchByTitle">
        (SELECT *
        <include refid="sql-part-searchByTitle" />)
    </sql>
    <sql id="sql-searchByWriter">
        (SELECT DISTINCT b.*
        <include refid="sql-part-searchByWriter" />)
    </sql>
    <sql id="sql-option-cnt">
        <choose>
            <when test='option=="title"'>
                <include refid="sql-part-searchByTitle" />
            </when>
            <when test='option=="writer"'>
                <include refid="sql-part-searchByWriter" />
            </when>
            <otherwise>
                FROM (
                <include refid="sql-searchByTitle"/>
                UNION
                <include refid="sql-searchByWriter"/>
                ) b
            </otherwise>
        </choose>
    </sql>
    <select id="searchByAll" parameterType="MainSearchCondition" resultType="BookDto">
        <include refid="sql-searchByTitle" />
        UNION
        <include refid="sql-searchByWriter" />
    </select>
    <select id="searchByTitle" parameterType="MainSearchCondition" resultType="BookDto">
        <include refid="sql-searchByTitle" />
    </select>
    <select id="searchByWriter" parameterType="MainSearchCondition" resultType="BookDto">
        <include refid="sql-searchByWriter" />
    </select>
    <select id="selectSearchCnt" parameterType="MainSearchCondition" resultType="int">
        SELECT count(DISTINCT b.book_id)
        <include refid="sql-option-cnt" />
    </select>
</mapper>